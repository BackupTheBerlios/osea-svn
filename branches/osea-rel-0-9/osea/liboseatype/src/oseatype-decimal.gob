

%alltop{
/*
 *
 *  LibOseaType: Classes for message composition
 *  Copyright (C) 2004 David Marín Carreño
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or   
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
%}

requires 2.0.0

%header{
#include <glib.h>
#include "oseatype-simple-object.h"
%}

%{
#include <glib.h>

%}

class OseaType:Decimal from OseaType:Simple:Object {
	
	private glong modulus = 0;
	private guint8 exponent = 0;


	public OseaTypeObject * new (void)
	{
		OseaTypeDecimal * result = GET_NEW;
		OSEATYPE_OBJECT(result)->is_finished = FALSE;
		OSEATYPE_OBJECT(result)->in_progress = FALSE;

		return OSEATYPE_OBJECT(result);

	}	

	public gboolean set (OseaTypeDecimal *self, glong modulus, gint exponent, GError **error)
	{
		self->_priv->modulus = modulus;
		self->_priv->exponent = exponent;
		OSEATYPE_OBJECT(self)->is_finished = TRUE;
		OSEATYPE_OBJECT(self)->in_progress = TRUE;

		return TRUE;

	}	

	public gboolean set_float (OseaTypeDecimal *self, gfloat value, GError **error)
	{
		guint8 exponent;
		gfloat float_modulus;
		glong modulus;

		exponent = 0;
		while (float_modulus != (gfloat) llroundf (float_modulus)) { 
			exponent ++;
			float_modulus = float_modulus * 10;
		}
		
		
		self->_priv->modulus = llroundf (modulus);
		self->_priv->exponent = exponent;
		OSEATYPE_OBJECT(self)->is_finished = TRUE;
		OSEATYPE_OBJECT(self)->in_progress = TRUE;

		return TRUE;

	}	

	public glong * get_modulus (OseaTypeDecimal *self, GError **error) 
	{
		if (! OSEATYPE_OBJECT(self)->is_finished) {
			g_set_error (error, g_quark_from_static_string ("OseaTypeDecimal"), 100, "Cannot get value: not yet completed");
			return 0;				     
		} else {
			return self->_priv->modulus;
		}


	}

	public guint8 * get_exponent (OseaTypeDecimal *self, GError **error) 
	{
		if (! OSEATYPE_OBJECT(self)->is_finished) {
			g_set_error (error, g_quark_from_static_string ("OseaTypeDecimal"), 100, "Cannot get value: not yet completed");
			return 0;				     
		} else {
			return self->_priv->exponent;
		}


	}

	public gfloat * get_float (OseaTypeDecimal *self, GError **error) 
	{
		if (! OSEATYPE_OBJECT(self)->is_finished) {
			g_set_error (error, g_quark_from_static_string ("OseaTypeDecimal"), 100, "Cannot get value: not yet completed");
			return 0;				     
		} else {
			return (self->_priv->modulus / (10 * self->_priv->exponent));
		}


	}
}
