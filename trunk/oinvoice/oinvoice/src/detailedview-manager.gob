%alltop{
/*
 *
 *  Detailed View Manager for ASPL Fact
 *  Copyright (C) 2003  Advanced Software Production Line, S.L.
 *  Copyright (C) 2003  David Marin   
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
%}
%header{
#include <afdal/afdal.h>
#include <gtk/gtkentry.h>
#include <gtk/gtkwindow.h>
#include <glade/glade.h>	
#include "aspl_listmodel.h"
#include "support.h"
#include "aspl_datalist.h"
#include "transaction_progress_window.h"
%} 

requires 2.0.0
 
%{
#include <glib.h>
#include <gtk/gtktreemodel.h>
#include "detailedview-manager.h"
#include "main_window.h"
#include "widgets.h"
#ifdef HAVE_LOCALE_H
#include <locale.h>
#endif
 
#ifdef ENABLE_NLS
#include <libintl.h>
#define _(String) gettext (String)
#else
#define _(String) (String)
#endif

	typedef struct __DetailedViewManagerItem DetailedViewManagerItem;
	struct __DetailedViewManagerItem {
		GtkWidget * widget;
		gchar     * node_property;
		gboolean    detailed_property;
	};

%}

class DetailedView:Manager from G:Object {
	// Type declaration
	private GList    * items      = NULL
		destroywith g_list_free;
	
	private AfDalDataNode * node  = NULL;

	private AfDalDetailedDataNode * detailed_node = NULL;
	
	private AsplListmodel * model = NULL;

	private GtkTreeView   * view  = NULL;

	private GtkTreeIter   * iter  = NULL;

	public void cursor_changed (GtkTreeView *treeview (check null), gpointer user_data) {
		GtkTreeSelection        * selection;
		GtkTreeIter               iter;
		GtkWidget               * widget;
		GList                   * cursor;
		Self                    * self = SELF (user_data);
		AfDalDataNode           * node = NULL;
		DetailedViewManagerItem * item = NULL;
		gchar                   * label_text = NULL;
		gint                      column_number;
		GValue                    value_string = {0, };
		GValue                    value_int = {0, };
		
		selection = gtk_tree_view_get_selection (treeview);
		
		if (gtk_tree_selection_get_selected (selection, NULL, &iter)) {
			cursor = g_list_first (self->_priv->items);
			node = aspl_listmodel_get_node (self->_priv->model, &iter);

			while (cursor) {
				
				item = (DetailedViewManagerItem *) (cursor->data);
				widget = item->widget;
				
				if (GTK_IS_LABEL (widget)) {
					if (! item->detailed_property) {
						column_number = aspl_listmodel_get_column (self->_priv->model, 
											   item->node_property);
						
						switch (gtk_tree_model_get_column_type (GTK_TREE_MODEL(self->_priv->model),
										       column_number)) {
						case G_TYPE_INT:
							gtk_tree_model_get_value (GTK_TREE_MODEL(self->_priv->model),
										 &iter, column_number, &value_int);
							label_text = g_strdup_printf ("%d", 
										      g_value_get_int (&value_int));
							g_value_set_string_take_ownership (&value_string, label_text);
							g_value_unset (&value_int);
							break;

							
						case G_TYPE_STRING:
							gtk_tree_model_get_value (GTK_TREE_MODEL(self->_priv->model),
										 &iter, column_number, &value_string);
							break;

						}

						g_object_set_property (G_OBJECT(widget), "label", &value_string);
						g_value_unset (&value_string);
					}



				} else if (GTK_IS_TEXT_VIEW (widget)) {
					g_critical ("Not yet implemented for gtk_text_views");			
				} else
					g_critical ("There is an unknown widget attached to the detailed-view-manager");

				cursor = cursor->next;
			}
			
		} else {
			cursor = g_list_first (self->_priv->items);
			
			while (cursor) {
				
				item = (DetailedViewManagerItem *) (cursor->data);
				widget = item->widget;
				
				if (GTK_IS_LABEL (widget))
					gtk_label_set_text (GTK_LABEL(widget), "");
				else if (GTK_IS_TEXT_VIEW (widget)) {
					g_critical ("Not yet implemented for gtk_text_views");			
				} else
					g_critical ("There is an unknown widget attached to the detailed-view-manager");
				
				cursor = cursor->next;
			}
			
		
		}
		
		return;
	}

	public gboolean unselect_all (GtkTreeView *treeview (check null), gpointer user_data) {
		GtkWidget               * widget;
		GList                   * cursor;
		Self                    * self = SELF (user_data);
		DetailedViewManagerItem * item = NULL;
		
		g_printerr ("TEST\n");

		cursor = g_list_first (self->_priv->items);
		
		while (cursor) {
			
			item = (DetailedViewManagerItem *) (cursor->data);
			widget = item->widget;
			
			if (GTK_IS_LABEL (widget))
				gtk_label_set_text (GTK_LABEL(widget), "");
			else if (GTK_IS_TEXT_VIEW (widget)) {
				g_critical ("Not yet implemented for gtk_text_views");			
			} else
				g_critical ("There is an unknown widget attached to the detailed-view-manager");
			
			cursor = cursor->next;
		}
		
		return TRUE;
		
	}


	public DetailedView:Manager * new (Gtk:TreeView * view (check null)) {

		DetailedViewManager * dvm = GET_NEW;
		
		dvm->_priv->view = view;
		dvm->_priv->model = ASPL_LISTMODEL (gtk_tree_view_get_model (view));

		g_signal_connect (view, "cursor_changed", G_CALLBACK (detailedview_manager_cursor_changed), dvm);
		g_signal_connect (view, "unselect_all", G_CALLBACK (detailedview_manager_unselect_all), dvm);

		return dvm;
	}

	public void attach_label (self, Gtk:Label * label_widget (check null), gchar * property_name (check null),
				    gboolean is_detailed) {

		DetailedViewManagerItem * item = g_new0 (DetailedViewManagerItem, 1);

		g_return_if_fail (GTK_IS_LABEL (label_widget));
		
		item->widget = GTK_WIDGET(label_widget);
		item->node_property = g_strdup(property_name);
		item->detailed_property = is_detailed;

		self->_priv->items = g_list_append (self->_priv->items, item);


	} 

}
